version: 2.1

vars:
  branch_main: &branch_main
    filters:
      branches:
        only: main

  branch_testing: &branch_testing
    filters:
      branches:
        ignore:
          - /^prod\//
          - /^pkg\//
          - main

  eslint-config__prod: &eslint-config__prod
    filters:
      branches:
        only: prod/eslint-config

  stylelint-config__prod: &stylelint-config__prod
    filters:
      branches:
        only: prod/stylelint-config

  storybook__prod: &storybook__prod
    filters:
      branches:
        only: prod/storybook

  gatsby__prod: &gatsby__prod
    filters:
      branches:
        only: prod/gatsby

  ts-base__prod: &ts-base__prod
    filters:
      branches:
        only: prod/ts-base

  ts-check-cli__prod: &ts-check-cli__prod
    filters:
      branches:
        only: prod/ts-check-cli

  dev-react__prod: &dev-react__prod
    filters:
      branches:
        only: prod/dev-react

  dev-pptr__prod: &dev-pptr__prod
    filters:
      branches:
        only: prod/dev-pptr

executors:
  node-browsers:
    environment:
      - TZ: Asia/Taipei
    docker:
      - image: circleci/node:latest-browsers
  node:
    environment:
      - TZ: Asia/Taipei
    docker:
      - image: circleci/node

commands:
    use_gcloud:
      description: Install Google Cloud SDK
      parameters:
        v:
          type: string
          default: $GCLOUD_SDK_VER
        key:
          type: string
          default: $GCLOUD_KEY
        project:
          type: string
          default: $GCLOUD_PROJECT
      steps:
        - run:
            name: Use Google Cloud SDK v<< parameters.v >>
            command: |
              TAR=~/gcloud-sdk.tar.gz
              GCLOUD_PATH=~/gcloud-sdk
              GCLOUD_KEY_PATH=~/gcloud.key.json

              curl https://dl.google.com/dl/cloudsdk/channels/rapid/downloads/google-cloud-sdk-<< parameters.v >>.0.0-linux-x86_64.tar.gz -o $TAR
              mkdir $GCLOUD_PATH && tar xf $TAR -C $GCLOUD_PATH  --strip-components 1

              echo "export PATH=$GCLOUD_PATH/bin:\$PATH" >> $BASH_ENV
              source $BASH_ENV

              gcloud components install kubectl
              gcloud config set project << parameters.project >>

              echo '<< parameters.key >>' | base64 --decode > $GCLOUD_KEY_PATH
              gcloud auth activate-service-account --key-file $GCLOUD_KEY_PATH

              gcloud container clusters get-credentials event-k8s --zone asia-northeast1-a
              gcloud info

    docker_build_push:
      description: Docker build
      parameters:
        repo:
          type: string
          default: repo-name
        url:
          type: string
          default: dkr.ecr.ap-northeast-1.amazonaws.com
        tag:
          type: string
          default: $CIRCLE_SHA1
      steps:
        - setup_docker
        - run:
            name: Build Docker Image
            command: |
              IMAGE=<< parameters.url >>/<< parameters.repo >>:<< parameters.tag >>
              docker build . -t $IMAGE
              docker images $IMAGE
              docker push $IMAGE

    setup_docker:
      steps:
        - setup_remote_docker:
            docker_layer_caching: true

    setup_npm:
      parameters:
        token:
          type: string
          default: $NPM_TOKEN
      steps:
        - run:
            name: Setup NPM
            command: echo "//registry.npmjs.org/:_authToken=<<parameters.token>>" >> ~/.npmrc

    deploy_npm:
      parameters:
        dir:
          type: string
          default: out
      steps:
        - setup_npm
        - run: npm publish << parameters.dir >>

    setup_git:
      parameters:
        user:
          type: string
          default: Rocky Wu
        email :
          type: string
          default : rwu823@gmail.com
      steps:
        - run:
            name: Setup Git
            command: |
              git config --global user.name '<<parameters.user>>'
              git config --global user.email '<<parameters.email>>'

    push_tag:
      parameters:
        tag:
          type: string
          default: $GIT_TAG
        repo:
          type: string
          default: git@github.com:$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git
      steps:
        - setup_git
        - run:
            name: Push git tag << parameters.tag >>
            command: |
              git tag $GIT_TAG
              git push --quiet << parameters.repo >> << parameters.tag >>

    push_branch:
      parameters:
        tag:
          type: string
          default: $GIT_TAG
        dir:
          type: string
          default: out
        repo:
          type: string
          default: git@github.com:$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME.git
        force:
            type: boolean
            default: false
        branch:
          type: string
          default: $GIT_TAG
        ignore_file:
          type: string
          default: .gitignore
      steps:
        - setup_git
        - run:
            name: Push to << parameters.branch >>
            command: |
              cp << parameters.ignore_file >> << parameters.dir >>
              cd << parameters.dir >>
              git init
              git add -A
              git commit -nm "[ci skip] << parameters.tag >>"

              git checkout -b << parameters.branch >>
              git push --quiet <<# parameters.force >> -f <</ parameters.force >> << parameters.repo >> HEAD

              rm -rf .git

    docker_login:
      parameters:
          user:
            type: string
            default: $DOCKER_USER
          pass:
            type: string
            default: $DOCKER_PASS
      steps:
        - run:
            name: Docker Login
            command: |
              docker login -u <<parameters.user>> -p <<parameters.user.pass>>

    init:
      parameters:
        no_module:
          type: boolean
          default: false
      description: Checkout sources and install node_modules
      steps:
        - checkout
        - restore_cache:
            key: node_modules#{{ checksum "yarn.lock" }}
        - run: yarn
        - unless:
            condition: << parameters.no_module >>
            steps:
              - save_cache:
                  key: node_modules#{{ checksum "yarn.lock" }}
                  paths:
                    - ~/.cache/ms-playwright
                    - node_modules
                    - packages/storybook/node_modules
                    - packages/dev-react/node_modules
                    - packages/dev-pptr/node_modules
                    - packages/gatsby/node_modules
                    - packages/ts-base/node_modules
                    - packages/ts-check-cli/node_modules
        - run: git checkout -- .
        - run:
            name: Init Submodule
            command: git submodule update --init --remote --depth 1
        # - run:
        #     name: Decrypt Secret
        #     command: |
        #       sudo apt-get -y -qq update
        #       sudo apt-get install bsdmainutils
        #       yarn --silent transcrypt -p "$REPO_SECRET" -y
        - run:
            name: Exports Env
            command: |
              git clone git@github.com:rwu823/env.git --depth 1
              echo "$(node env/export)" >> $BASH_ENV
              echo 'export PATH="$(yarn global bin):$PATH"' >> $BASH_ENV

              source $BASH_ENV

jobs:
  e2e:
    executor: node-browsers
    steps:
      - init
      - run: yarn workspace @ts-mono/dev-pptr e2e

  test:
    executor: node
    steps:
      - init
      - run: yarn test:ci
      - run: bash <(curl -s https://codecov.io/bash)

  lint:
    executor: node
    steps:
      - init
      - run:
          name: Run ESLint only on modified files.
          command: npx eslint $(git diff --diff-filter=d origin/HEAD --name-only --cached '*.ts' '*.tsx' '*.js')

  ts-base__deploy:
    executor: node
    steps:
      - init
      - run: yarn workspace @ts-mono/base build
      - push_branch:
          dir: packages/ts-base/out
          branch: pkg/ts-base
          force: true

  ts-check-cli__deploy:
    executor: node
    steps:
      - init
      - run: yarn workspace ts-check-cli build
      - deploy_npm:
          dir: packages/ts-check-cli/out

  gatsby__deploy:
    executor: node
    steps:
        - init:
            no_module: true
        - push_branch:
            dir: packages/gatsby
            branch: pkg/gatsby
            force: true

  dev-pptr__deploy:
    executor: node
    steps:
        - init:
            no_module: true
        - push_branch:
            dir: packages/dev-pptr
            branch: pkg/dev-pptr
            force: true

  eslint-config__deploy:
    executor: node
    steps:
        - init:
            no_module: true
        - run: yarn workspace @ts-mono/eslint-config build
        - push_branch:
            dir: packages/eslint-config/out
            branch: pkg/eslint-config
            force: true

  stylelint-config__deploy:
    executor: node
    steps:
        - init:
            no_module: true
        - run: yarn workspace @ts-mono/stylelint-config build
        - push_branch:
            dir: packages/stylelint-config/out
            branch: pkg/stylelint-config
            force: true

  storybook__deploy:
    executor: node
    steps:
        - init
        - push_branch:
            dir: packages/storybook
            branch: pkg/storybook
            force: true

  dev-react__deploy:
    executor: node
    steps:
        - init
        - push_branch:
            dir: packages/dev-react
            branch: pkg/dev-react
            force: true

  mono-deploy:
    executor: node
    steps:
      - init
      - run: npx ts-node scripts/monoDeploy

workflows:
  version: 2

  Mono Base:
    jobs:
      - e2e:
          <<: *branch_testing
      - test:
          <<: *branch_testing
      - lint:
          <<: *branch_testing
      - mono-deploy:
          <<: *branch_main

  Build And Deploy:
    jobs:
      - stylelint-config__deploy:
          <<: *stylelint-config__prod
      - eslint-config__deploy:
          <<: *eslint-config__prod
      - storybook__deploy:
          <<: *storybook__prod
      - gatsby__deploy:
          <<: *gatsby__prod
      - dev-pptr__deploy:
          <<: *dev-pptr__prod
      - dev-react__deploy:
          <<: *dev-react__prod
      - ts-check-cli__deploy:
          <<: *ts-check-cli__prod
      - ts-base__deploy:
          <<: *ts-base__prod
